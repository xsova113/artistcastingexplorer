// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model TalentProfile {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @unique
  isApproved      Boolean?
  firstName       String
  middleName      String?
  lastName        String
  stageName       String?
  email           String        @unique
  dob             DateTime
  performerType   PerformerType @relation(fields: [performerTypeId], references: [id])
  performerTypeId String        @db.ObjectId
  height          String
  gender          Gender        @relation(fields: [genderId], references: [id])
  genderId        String        @db.ObjectId
  bio             String
  ageRange        String
  bodyType        String?
  agency          String?
  skills          Skill[]
  images          Image[]
  location        Location      @relation(fields: [locationId], references: [id])
  locationId      String        @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  savedTalent   SavedTalent? @relation(fields: [savedTalentId], references: [id])
  savedTalentId String?      @db.ObjectId
}

model Gender {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  gender         GenderType
  talentProfiles TalentProfile[]
}

enum GenderType {
  MALE
  FEMALE
  NON_BINARY
  TRANS_MALE
  TRANS_FEMALE
}

model Skill {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  skill           String?
  TalentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id])
  talentProfileId String        @db.ObjectId
}

model PerformerType {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  role           Role
  talentProfiles TalentProfile[]
}

model Location {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  city           City?
  province       Province?
  talentProfiles TalentProfile[]
}

enum Role {
  ACTOR
  ACTRESS
  COMEDIAN
  CREATIVE_CREW
  DANCER
  IDOL
  MASTER_OF_CEREMONIES
  modelMUSICIAN
  SINGER
  STAGE_PERFORMER
  STUNT_PERFORMER
  VOICEOVER_ARTIST
  OTHER
}

enum City {
  VANCOUVER
  TORONTO
  OTHER
}

enum Province {
  BRITISH_COLUMBIA
  ONTARIO
  ALBERTA
  MANITOBA
  NEWB_RUNSWICK
  NEWFOUNDLAND_AND_LABRADOR
  NOVA_SCOTIA
  PRINCE_EDWARD_ISLAND
  QUEBEC
  SASKATCHEWAN
}

model Image {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  url String

  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id])
  talentProfileId String        @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model SavedTalent {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @unique
  talentProfiles TalentProfile[]
}

model SavedFilter {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
}
