// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TalentProfile {
  id              String        @id @default(uuid())
  userId          String        @unique
  isApproved      Boolean?
  firstName       String
  middleName      String?
  lastName        String
  stageName       String?
  email           String
  performerType   PerformerType @relation(fields: [performerTypeId], references: [id])
  performerTypeId String
  height          Int?
  gender          GenderType?
  genderId        String?
  bio             String?
  ageMax          Int?
  ageMin          Int?
  bodyType        BodyType?
  agency          String?
  hairColour      String?
  eyeColour       String?
  credits         Credit[]
  instagram       String?
  twitter         String?
  tiktok          String?
  youtube         String?
  website         String?
  language        Language
  japaneseLevel   JapaneseLevel
  skills          Skill[]
  images          Image[]
  videos          Video[]
  location        Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId      String
  union           String?
  savedByUsers    SavedByUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id      String @id @default(cuid())
  userId  String
  title   String
  content Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedByUser {
  id     String @id @default(uuid())
  userId String

  TalentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  talentProfileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BodyType {
  SLIM
  FIT
  CURVY
  MUSCULAR
  EXTRA_SIZE
}

enum GenderType {
  MALE
  FEMALE
  NON_BINARY
  TRANS_MALE
  TRANS_FEMALE
  PREFER_NOT_TO_SAY
}

model Skill {
  id              String        @id @default(uuid())
  skill           String?
  TalentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  talentProfileId String
}

model PerformerType {
  id             String          @id @default(uuid())
  role           Role
  secondaryRole  Role?
  talentProfiles TalentProfile[]
}

model Location {
  id             String          @id @default(uuid())
  city           City
  province       Province?
  talentProfiles TalentProfile[]
}

enum Role {
  ACTOR
  ACTRESS
  DIRECTOR
  COMEDIAN
  CREATIVE_CREW
  DANCER
  IDOL
  CHOREOGRAPHER
  MASTER_OF_CEREMONIES
  DRAG_QUEEN
  IMPROVISOR
  MODEL
  MUSICIAN
  SINGER
  STAGE_PERFORMER
  STUNT_PERFORMER
  VOICEOVER_ARTIST
  OTHER
}

enum City {
  VANCOUVER
  TORONTO
  OTHER_PROVINCE
  NATIONWIDE
}

enum Province {
  ALBERTA
  MANITOBA
  NEW_BRUNSWICK
  NEWFOUNDLAND_AND_LABRADOR
  NOVA_SCOTIA
  PRINCE_EDWARD_ISLAND
  QUEBEC
  SASKATCHEWAN
}

enum Language {
  ENGLISH_BEGINNER
  ENGLISH_INTERMEDIATE
  ENGLISH_ADVANCED
  ENGLISH_NATIVE
}

enum JapaneseLevel {
  JAPANESE_BEGINNER
  JAPANESE_INTERMEDIATE
  JAPANESE_ADVANCED
  JAPANESE_NATIVE
}

model Image {
  id      String @id @default(uuid())
  url     String
  fileKey String

  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  talentProfileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Video {
  id   String @id @default(uuid())
  url  String
  // fileKey String?
  name String

  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  talentProfileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model SavedTalent {
  id                String           @id @default(uuid())
  talentProfileId   String?
  userSavedTalent   UserSavedTalent? @relation(fields: [userSavedTalentId], references: [id], onDelete: Cascade)
  userSavedTalentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSavedTalent {
  id           String        @id @default(uuid())
  userId       String        @unique
  savedTalents SavedTalent[]
}

model SavedFilter {
  id                String           @id @default(uuid())
  name              String
  queryPathname     String
  UserSavedFilter   UserSavedFilter? @relation(fields: [userSavedFilterId], references: [id], onDelete: Cascade)
  userSavedFilterId String?
}

model UserSavedFilter {
  id           String        @id @default(uuid())
  userId       String        @unique
  savedFilters SavedFilter[]
}

model Credit {
  id              String  @id @default(uuid())
  category        String
  productionTitle String
  yearOfRelease   Int
  role            String?
  numberOfEpisode Int?

  TalentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)
  talentProfileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
